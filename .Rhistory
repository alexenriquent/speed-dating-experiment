cat('\n')
print(matrix)
cat(paste("\nAccuracy:\t\t   ", ACC,
"\nSensitivity/Recall:\t   ", TPR,
"\nSpecificity:\t\t   ", TNR,
"\nFall-out:\t\t   ", FPR,
"\nMiss rate:\t\t   ", FNR,
"\nPrecision:\t\t   ", PPV,
"\nNegative predictive value: ", NPV,
"\nFalse discovery rate:\t   ", FDR,
"\nF-measure:\t\t   ", F1, '\n'))
}
rpart.analysis <- function(rpart) {
cat('\n')
print(rpart)
cat('\n')
}
rf.analysis <- function(rf) {
cat('\n')
print(rf)
importance(rf)
cat('\n')
}
library(randomForest)
library(ROCR)
source("R/analysis.R")
data <- read.csv("data/dataset.csv", header = TRUE, stringsAsFactors = FALSE)
train <- data[2001:nrow(data), ]
test <- data[1:2000, ]
rf <- randomForest(as.factor(dec_o) ~ attr_o + intel_o + sinc_o + fun_o + amb_o + shar_o, data = train, importance = TRUE)
plot(rf, log = "y")
varImpPlot(rf)
roc <- prediction(predict(rf, newdata = test, type = "prob")[, 2], test$dec_o)
plot(performance(roc, "tpr", "fpr"), colorize = TRUE)
abline(0, 1, lty = 3)
prediction <- predict(rf, test)
truth <- test$dec_o
confusion <- confusion.matrix(prediction, truth)
rf.analysis(rf)
confusion.analysis(confusion)
rf.analysis <- function(rf) {
print(rf)
importance(rf)
cat('\n')
}
rf.analysis(rf)
confusion.analysis(confusion)
rf.analysis(rf)
rf.analysis(rf)
importance(rf)
confusion.analysis(confusion)
rf.analysis(rf)
importance(rf)
confusion.analysis(confusion)
confusion.matrix <- function(prediction, truth) {
xtab <- (table(prediction, truth))
confusion <- matrix(rev(as.vector(xtab)), ncol = 2, byrow = TRUE)
colnames(confusion) <- c("Pred:yes", "Pred:no")
rownames(confusion) <- c("Actual:yes", "Actual:no")
confusion <- as.table(confusion)
}
confusion.analysis <- function(matrix) {
TP <- matrix[1, 1]
FN <- matrix[1, 2]
FP <- matrix[2, 1]
TN <- matrix[2, 2]
ACC <- (TP + TN) / (TP + TN + FP + FN)
TPR <- TP / (TP + FN)
TNR <- TN / (FP + TN)
FPR <- FP / (FP + TN)
FNR <- FN / (FN + TP)
PPV <- TP / (TP + FP)
NPV <- TN / (TN + FN)
FDR <- FP / (FP + TP)
F1 <- (2 * TPR * PPV) / (TPR + PPV)
cat('\n')
print(matrix)
cat(paste("\nAccuracy:\t\t   ", ACC,
"\nSensitivity/Recall:\t   ", TPR,
"\nSpecificity:\t\t   ", TNR,
"\nFall-out:\t\t   ", FPR,
"\nMiss rate:\t\t   ", FNR,
"\nPrecision:\t\t   ", PPV,
"\nNegative predictive value: ", NPV,
"\nFalse discovery rate:\t   ", FDR,
"\nF-measure:\t\t   ", F1, '\n'))
}
rpart.analysis <- function(rpart) {
print(rpart)
}
rf.analysis <- function(rf) {
print(rf)
}
rf.analysis(rf)
importance(rf)
confusion.analysis(confusion)
print(matrix)
confusion.matrix <- function(prediction, truth) {
xtab <- (table(prediction, truth))
confusion <- matrix(rev(as.vector(xtab)), ncol = 2, byrow = TRUE)
colnames(confusion) <- c("Pred:yes", "Pred:no")
rownames(confusion) <- c("Actual:yes", "Actual:no")
confusion <- as.table(confusion)
}
confusion.analysis <- function(matrix) {
TP <- matrix[1, 1]
FN <- matrix[1, 2]
FP <- matrix[2, 1]
TN <- matrix[2, 2]
ACC <- (TP + TN) / (TP + TN + FP + FN)
TPR <- TP / (TP + FN)
TNR <- TN / (FP + TN)
FPR <- FP / (FP + TN)
FNR <- FN / (FN + TP)
PPV <- TP / (TP + FP)
NPV <- TN / (TN + FN)
FDR <- FP / (FP + TP)
F1 <- (2 * TPR * PPV) / (TPR + PPV)
print(matrix)
cat(paste("\nAccuracy:\t\t   ", ACC,
"\nSensitivity/Recall:\t   ", TPR,
"\nSpecificity:\t\t   ", TNR,
"\nFall-out:\t\t   ", FPR,
"\nMiss rate:\t\t   ", FNR,
"\nPrecision:\t\t   ", PPV,
"\nNegative predictive value: ", NPV,
"\nFalse discovery rate:\t   ", FDR,
"\nF-measure:\t\t   ", F1, '\n'))
}
rpart.analysis <- function(rpart) {
print(rpart)
}
rf.analysis <- function(rf) {
print(rf)
}
rf.analysis(rf)
importance(rf)
confusion.analysis(confusion)
rf.analysis <- function(rf) {
print(rf)
print(importance(rf))
}
rf.analysis(rf)
rf.analysis <- function(rf) {
print(rf)
cat("\nImportance:")
print(importance(rf))
}
rf.analysis(rf)
rf.analysis <- function(rf) {
print(rf)
cat("\nImportance:\n")
print(importance(rf))
}
rf.analysis(rf)
library(randomForest)
library(ROCR)
source("R/analysis.R")
data <- read.csv("data/dataset.csv", header = TRUE, stringsAsFactors = FALSE)
male <- data[data$gender == 1, ]
male.train <- male[1001:nrow(male), ]
male.test <- male[1:1000, ]
male.rf <- randomForest(as.factor(dec_o) ~ attr_o + intel_o + sinc_o + fun_o + amb_o + shar_o, data = train, importance = TRUE)
plot(male.rf, log = "y")
varImpPlot(male.rf)
male.roc <- prediction(predict(male.rf , newdata = male.test, type = "prob")[, 2], male.test$dec_o)
plot(performance(male.roc, "tpr", "fpr"), colorize = TRUE)
abline(0, 1, lty = 3)
male.prediction <- predict(male.rf, male.test)
male.truth <- male.test$dec_o
male.confusion <- confusion.matrix(male.prediction, male.truth)
rf.analysis(male.rf)
confusion.analysis(male.confusion)
library(randomForest)
library(ROCR)
source("R/analysis.R")
data <- read.csv("data/dataset.csv", header = TRUE, stringsAsFactors = FALSE)
female <- data[data$gender == 0, ]
female.train <- female[1001:nrow(female), ]
female.test <- female[1:1000, ]
female.rf <- randomForest(as.factor(dec_o) ~ attr_o + intel_o + sinc_o + fun_o + amb_o + shar_o, data = train, importance = TRUE)
plot(female.rf, log = "y")
varImpPlot(female.rf)
female.roc <- prediction(predict(female.rf , newdata = female.test, type = "prob")[, 2], female.test$dec_o)
plot(performance(female.roc, "tpr", "fpr"), colorize = TRUE)
abline(0, 1, lty = 3)
female.prediction <- predict(female.rf, female.test)
female.truth <- female.test$dec_o
female.confusion <- confusion.matrix(female.prediction, female.truth)
rf.analysis(female.rf)
confusion.analysis(female.confusion)
library(rpart)
library(rpart.plot)
library(partykit)
library(ROCR)
source("R/analysis.R")
source("R/utilities.R")
data <- read.csv("data/dataset.csv", header = TRUE, stringsAsFactors = FALSE)
data <- data.format(data)
train <- data[2001:nrow(data), ]
test <- data[1:2000, ]
tree <- dec_o ~ attr_o + intel_o + sinc_o + fun_o + amb_o + shar_o
rpart <- rpart(tree, data = train, method = "class", control = rpart.control(cp = 0, maxdepth = 4))
rpart.pruned <- rpart(tree, data = train, method = "class")
rparty <- as.party(rpart.pruned)
plot(rparty, type = "simple")
library(rpart)
library(rpart.plot)
library(partykit)
library(ROCR)
source("R/analysis.R")
source("R/utilities.R")
data <- read.csv("data/dataset.csv", header = TRUE, stringsAsFactors = FALSE)
data <- data.format(data)
train <- data[2001:nrow(data), ]
test <- data[1:2000, ]
tree <- dec_o ~ attr_o + intel_o + sinc_o + fun_o + amb_o + shar_o
rpart <- rpart(tree, data = train, method = "class")
rpart.extended <- rpart(tree, data = train, method = "class", control = rpart.control(cp = 0, maxdepth = 4))
rparty <- as.party(rpart)
plot(rparty, type = "simple")
library(rpart)
library(rpart.plot)
library(partykit)
library(ROCR)
source("R/analysis.R")
source("R/utilities.R")
data <- read.csv("data/dataset.csv", header = TRUE, stringsAsFactors = FALSE)
data <- data.format(data)
train <- data[2001:nrow(data), ]
test <- data[1:2000, ]
tree <- dec_o ~ attr_o + intel_o + sinc_o + fun_o + amb_o + shar_o
rpart <- rpart(tree, data = train, method = "class")
rpart.extended <- rpart(tree, data = train, method = "class", control = rpart.control(cp = 0, maxdepth = 4))
rparty <- as.party(rpart)
plot(rparty, type = "simple")
roc <- prediction(predict(rpart, newdata = test, type = "prob")[, 2], test$dec_o)
plot(performance(roc, "tpr", "fpr"), colorize = TRUE)
abline(0, 1, lty = 3)
prediction <- predict(rpart, test, type = "class")
truth <- test$dec_o
confusion <- confusion.matrix(prediction, truth)
rpart.analysis(rpart)
confusion.analysis(confusion)
library(rpart)
library(rpart.plot)
library(partykit)
library(ROCR)
source("R/analysis.R")
source("R/utilities.R")
data <- read.csv("data/dataset.csv", header = TRUE, stringsAsFactors = FALSE)
data <- data.format(data)
male <- data[data$gender == 1, ]
male.train <- male[1001:nrow(male), ]
male.test <- male[1:1000, ]
male.tree <- dec_o ~ attr_o + intel_o + sinc_o + fun_o + amb_o + shar_o
male.rpart <- rpart(male.tree, data = male.train, method = "class")
male.rpart.extended <- rpart(male.tree, data = male.train, method = "class", control = rpart.control(cp = 0, maxdepth = 4))
male.rparty <- as.party(male.rpart)
plot(male.rparty, type = "simple")
male.roc <- prediction(predict(male.rpart, newdata = male.test, type = "prob")[, 2], male.test$dec_o)
plot(performance(male.roc, "tpr", "fpr"), colorize = TRUE)
abline(0, 1, lty = 3)
roc <- prediction(predict(rpart, newdata = test, type = "prob")[, 2], test$dec_o)
plot(performance(roc, "tpr", "fpr"), colorize = TRUE)
abline(0, 1, lty = 3)
library(rpart)
library(rpart.plot)
library(partykit)
library(ROCR)
source("R/analysis.R")
source("R/utilities.R")
data <- read.csv("data/dataset.csv", header = TRUE, stringsAsFactors = FALSE)
data <- data.format(data)
female <- data[data$gender == 0, ]
female.train <- female[1001:nrow(female), ]
female.test <- female[1:1000, ]
female.tree <- dec_o ~ attr_o + intel_o + sinc_o + fun_o + amb_o + shar_o
female.rpart <- rpart(female.tree, data = female.train, method = "class")
female.rpart.extended <- rpart(female.tree, data = female.train, method = "class", control = rpart.control(cp = 0, maxdepth = 4))
female.rparty <- as.party(female.rpart)
plot(female.rparty, type = "simple")
female.roc <- prediction(predict(female.rpart, newdata = female.test, type = "prob")[, 2], female.test$dec_o)
plot(performance(female.roc, "tpr", "fpr"), colorize = TRUE)
abline(0, 1, lty = 3)
library(randomForest)
library(ROCR)
source("R/analysis.R")
data <- read.csv("data/dataset.csv", header = TRUE, stringsAsFactors = FALSE)
train <- data[2001:nrow(data), ]
test <- data[1:2000, ]
rf <- randomForest(as.factor(dec_o) ~ attr_o + intel_o + sinc_o + fun_o + amb_o + shar_o, data = train, importance = TRUE)
plot(rf, log = "y")
varImpPlot(rf)
roc <- prediction(predict(rf, newdata = test, type = "prob")[, 2], test$dec_o)
plot(performance(roc, "tpr", "fpr"), colorize = TRUE)
abline(0, 1, lty = 3)
library(randomForest)
library(ROCR)
source("R/analysis.R")
data <- read.csv("data/dataset.csv", header = TRUE, stringsAsFactors = FALSE)
male <- data[data$gender == 1, ]
male.train <- male[1001:nrow(male), ]
male.test <- male[1:1000, ]
male.rf <- randomForest(as.factor(dec_o) ~ attr_o + intel_o + sinc_o + fun_o + amb_o + shar_o, data = train, importance = TRUE)
plot(male.rf, log = "y")
varImpPlot(male.rf)
varImpPlot(male.rf)
male.roc <- prediction(predict(male.rf , newdata = male.test, type = "prob")[, 2], male.test$dec_o)
plot(performance(male.roc, "tpr", "fpr"), colorize = TRUE)
abline(0, 1, lty = 3)
library(randomForest)
library(ROCR)
source("R/analysis.R")
data <- read.csv("data/dataset.csv", header = TRUE, stringsAsFactors = FALSE)
female <- data[data$gender == 0, ]
female.train <- female[1001:nrow(female), ]
female.test <- female[1:1000, ]
female.rf <- randomForest(as.factor(dec_o) ~ attr_o + intel_o + sinc_o + fun_o + amb_o + shar_o, data = train, importance = TRUE)
plot(female.rf, log = "y")
varImpPlot(female.rf)
female.roc <- prediction(predict(female.rf , newdata = female.test, type = "prob")[, 2], female.test$dec_o)
plot(performance(female.roc, "tpr", "fpr"), colorize = TRUE)
abline(0, 1, lty = 3)
library(rpart)
library(rpart.plot)
library(partykit)
library(ROCR)
source("R/analysis.R")
source("R/utilities.R")
data <- read.csv("data/dataset.csv", header = TRUE, stringsAsFactors = FALSE)
data <- data.format(data)
train <- data[2001:nrow(data), ]
test <- data[1:2000, ]
tree <- dec_o ~ attr_o + intel_o + sinc_o + fun_o + amb_o + shar_o
rpart <- rpart(tree, data = train, method = "class")
rpart.extended <- rpart(tree, data = train, method = "class", control = rpart.control(cp = 0, maxdepth = 4))
rparty <- as.party(rpart)
plot(rparty, type = "simple")
roc <- prediction(predict(rpart, newdata = test, type = "prob")[, 2], test$dec_o)
plot(performance(roc, "tpr", "fpr"), colorize = TRUE)
abline(0, 1, lty = 3)
prediction <- predict(rpart, test, type = "class")
truth <- test$dec_o
confusion <- confusion.matrix(prediction, truth)
rpart.analysis(rpart)
confusion.analysis(confusion)
library(randomForest)
library(ROCR)
source("R/analysis.R")
data <- read.csv("data/dataset.csv", header = TRUE, stringsAsFactors = FALSE)
male <- data[data$gender == 1, ]
male.train <- male[1001:nrow(male), ]
male.test <- male[1:1000, ]
male.rf <- randomForest(as.factor(dec_o) ~ attr_o + intel_o + sinc_o + fun_o + amb_o + shar_o, data = train, importance = TRUE)
plot(male.rf, log = "y")
varImpPlot(male.rf)
male.roc <- prediction(predict(male.rf , newdata = male.test, type = "prob")[, 2], male.test$dec_o)
plot(performance(male.roc, "tpr", "fpr"), colorize = TRUE)
abline(0, 1, lty = 3)
male.prediction <- predict(male.rf, male.test)
male.truth <- male.test$dec_o
male.confusion <- confusion.matrix(male.prediction, male.truth)
rf.analysis(male.rf)
confusion.analysis(male.confusion)
library(rpart)
library(rpart.plot)
library(partykit)
library(ROCR)
source("R/analysis.R")
source("R/utilities.R")
data <- read.csv("data/dataset.csv", header = TRUE, stringsAsFactors = FALSE)
data <- data.format(data)
male <- data[data$gender == 1, ]
male.train <- male[1001:nrow(male), ]
male.test <- male[1:1000, ]
male.tree <- dec_o ~ attr_o + intel_o + sinc_o + fun_o + amb_o + shar_o
male.rpart <- rpart(male.tree, data = male.train, method = "class")
male.rpart.extended <- rpart(male.tree, data = male.train, method = "class", control = rpart.control(cp = 0, maxdepth = 4))
male.rparty <- as.party(male.rpart)
plot(male.rparty, type = "simple")
male.roc <- prediction(predict(male.rpart, newdata = male.test, type = "prob")[, 2], male.test$dec_o)
plot(performance(male.roc, "tpr", "fpr"), colorize = TRUE)
abline(0, 1, lty = 3)
male.prediction <- predict(male.rpart, male.test, type = "class")
male.truth <- male.test$dec_o
male.confusion <- confusion.matrix(male.prediction, male.truth)
rpart.analysis(male.rpart)
confusion.analysis(male.confusion)
library(rpart)
library(rpart.plot)
library(partykit)
library(ROCR)
source("R/analysis.R")
source("R/utilities.R")
data <- read.csv("data/dataset.csv", header = TRUE, stringsAsFactors = FALSE)
data <- data.format(data)
female <- data[data$gender == 0, ]
female.train <- female[1001:nrow(female), ]
female.test <- female[1:1000, ]
female.tree <- dec_o ~ attr_o + intel_o + sinc_o + fun_o + amb_o + shar_o
female.rpart <- rpart(female.tree, data = female.train, method = "class")
female.rpart.extended <- rpart(female.tree, data = female.train, method = "class", control = rpart.control(cp = 0, maxdepth = 4))
female.rparty <- as.party(female.rpart)
plot(female.rparty, type = "simple")
female.roc <- prediction(predict(female.rpart, newdata = female.test, type = "prob")[, 2], female.test$dec_o)
plot(performance(female.roc, "tpr", "fpr"), colorize = TRUE)
abline(0, 1, lty = 3)
female.prediction <- predict(female.rpart, female.test, type = "class")
female.truth <- female.test$dec_o
female.confusion <- confusion.matrix(female.prediction, female.truth)
rpart.analysis(female.rpart)
confusion.analysis(female.confusion)
library(randomForest)
library(ROCR)
source("R/analysis.R")
data <- read.csv("data/dataset.csv", header = TRUE, stringsAsFactors = FALSE)
train <- data[2001:nrow(data), ]
test <- data[1:2000, ]
rf <- randomForest(as.factor(dec_o) ~ attr_o + intel_o + sinc_o + fun_o + amb_o + shar_o, data = train, importance = TRUE)
plot(rf, log = "y")
varImpPlot(rf)
roc <- prediction(predict(rf, newdata = test, type = "prob")[, 2], test$dec_o)
plot(performance(roc, "tpr", "fpr"), colorize = TRUE)
abline(0, 1, lty = 3)
prediction <- predict(rf, test)
truth <- test$dec_o
confusion <- confusion.matrix(prediction, truth)
rf.analysis(rf)
confusion.analysis(confusion)
library(randomForest)
library(ROCR)
source("R/analysis.R")
data <- read.csv("data/dataset.csv", header = TRUE, stringsAsFactors = FALSE)
male <- data[data$gender == 1, ]
male.train <- male[1001:nrow(male), ]
male.test <- male[1:1000, ]
male.rf <- randomForest(as.factor(dec_o) ~ attr_o + intel_o + sinc_o + fun_o + amb_o + shar_o, data = train, importance = TRUE)
plot(male.rf, log = "y")
varImpPlot(male.rf)
male.roc <- prediction(predict(male.rf , newdata = male.test, type = "prob")[, 2], male.test$dec_o)
plot(performance(male.roc, "tpr", "fpr"), colorize = TRUE)
abline(0, 1, lty = 3)
male.prediction <- predict(male.rf, male.test)
male.truth <- male.test$dec_o
male.confusion <- confusion.matrix(male.prediction, male.truth)
rf.analysis(male.rf)
confusion.analysis(male.confusion)
library(rpart)
library(rpart.plot)
library(partykit)
library(ROCR)
source("R/analysis.R")
source("R/utilities.R")
data <- read.csv("data/dataset.csv", header = TRUE, stringsAsFactors = FALSE)
data <- data.format(data)
female <- data[data$gender == 0, ]
female.train <- female[1001:nrow(female), ]
female.test <- female[1:1000, ]
female.tree <- dec_o ~ attr_o + intel_o + sinc_o + fun_o + amb_o + shar_o
female.rpart <- rpart(female.tree, data = female.train, method = "class")
female.rpart.extended <- rpart(female.tree, data = female.train, method = "class", control = rpart.control(cp = 0, maxdepth = 4))
female.rparty <- as.party(female.rpart)
plot(female.rparty, type = "simple")
female.roc <- prediction(predict(female.rpart, newdata = female.test, type = "prob")[, 2], female.test$dec_o)
plot(performance(female.roc, "tpr", "fpr"), colorize = TRUE)
abline(0, 1, lty = 3)
female.prediction <- predict(female.rpart, female.test, type = "class")
female.truth <- female.test$dec_o
female.confusion <- confusion.matrix(female.prediction, female.truth)
rpart.analysis(female.rpart)
confusion.analysis(female.confusion)
library(randomForest)
library(ROCR)
source("R/analysis.R")
data <- read.csv("data/dataset.csv", header = TRUE, stringsAsFactors = FALSE)
female <- data[data$gender == 0, ]
female.train <- female[1001:nrow(female), ]
female.test <- female[1:1000, ]
female.rf <- randomForest(as.factor(dec_o) ~ attr_o + intel_o + sinc_o + fun_o + amb_o + shar_o, data = train, importance = TRUE)
plot(female.rf, log = "y")
varImpPlot(female.rf)
female.roc <- prediction(predict(female.rf , newdata = female.test, type = "prob")[, 2], female.test$dec_o)
plot(performance(female.roc, "tpr", "fpr"), colorize = TRUE)
abline(0, 1, lty = 3)
female.prediction <- predict(female.rf, female.test)
female.truth <- female.test$dec_o
female.confusion <- confusion.matrix(female.prediction, female.truth)
rf.analysis(female.rf)
confusion.analysis(female.confusion)
library(randomForest)
library(ROCR)
source("R/analysis.R")
data <- read.csv("data/dataset.csv", header = TRUE, stringsAsFactors = FALSE)
train <- data[2001:nrow(data), ]
test <- data[1:2000, ]
rf <- randomForest(as.factor(dec_o) ~ attr_o + intel_o + sinc_o + fun_o + amb_o + shar_o, data = train, importance = TRUE)
plot(rf, log = "y")
varImpPlot(rf)
rf
getTree(rf)
rf
importance(rf)
summary(rf)
rf
plot(rf, log = "y")
plot(rf, log = "y")
legend("top", colnames(rf$err.rate))
plot(rf, log = "y")
legend("top", colnames(rf$err.rate), col = 1:2, cex = 0.8, fill = 1:2)
legend("top", colnames(rf$err.rate), col = 0:1, cex = 0.8, fill = 0:1)
legend("top", colnames(rf$err.rate), col = 1:3, cex = 0.8, fill = 1:3)
