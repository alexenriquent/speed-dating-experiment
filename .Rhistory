rpart.plot(rpart)
rpart.plot(rpart)
rpart.plot(rpart(tree, data = training.data, method = "class"))
rpart.plot(binary.model)
binary.model <- rpart(tree, data = training.data.summary, method = "class")
binary.model <- rpart
rpart.plot(binary.model)
rpart <- rpart(tree, data = training.data, method = "class", cp = 0.2)
binary.model <- rpart
rpart.plot(binary.model)
rpart <- rpart(tree, data = training.data, method = "class")
plot(rpart, mar = c(0, 0.1, 0, 0))
text(rpart)
binary.model <- rpart
rpart.plot(binary.model, fallen.leaves = FALSE)
rpart.plot(binary.model, tweak = 8)
rpart.plot(binary.model, tweak = 5)
rpart.plot(binary.model, tweak = 1)
prp(rpart)
rpart.plot(binary.model, tweak = 1)
rpart.plot(binary.model)
rpart.plot(binary.model, cex = .7)
rpart.plot(binary.model, cex = .1)
rpart.plot(binary.model, cex = .5)
rpart.plot(binary.model)
text(rpart)
binary.model <- rpart
rpart.plot(binary.model)
par(mflow = c(1, 2))
par(mfrow = c(1, 2))
binary.model <- rpart
rpart.plot(binary.model)
par(mfrow = c(1, 2))
binary.model <- rpart
binary.model <- rpart
rpart.plot(binary.model)
rpart.plot(binary.model)
library(rpart)
library(rpart.plot)
data <- read.csv("dataset.csv", header = TRUE, stringsAsFactors = FALSE)
training.data <- data[2001:nrow(data), ]
test.data <- data[1:2000, ]
confusion.matrix <- function(prediction, truth) {
xtab <- (table(prediction, truth))
confusion <- matrix(rev(as.vector(xtab)), ncol = 2, byrow = TRUE)
colnames(confusion) <- c(1, 0)
rownames(confusion) <- c(1, 0)
confusion <- as.table(confusion)
}
confusion.data <- function(matrix) {
tp <- matrix[1, 1]
fn <- matrix[1, 2]
fp <- matrix[2, 1]
tn <- matrix[2, 2]
accuracy <- (tp + tn) / (tp + tn + fp + fn)
}
tree <- dec_o ~ attr_o + intel_o + sinc_o + fun_o + shar_o + gender
rpart <- rpart(tree, data = training.data, method = "class")
binary.model <- rpart
rpart.plot(binary.model)
prediction <- predict(rpart, test.data, type = "class")
truth <- test.data$dec_o
confusion <- confusion.matrix(prediction, truth)
install.packages("rattle")
library(RColorBrewer)
library(rattle)
library(rattle)
fancyRpartPlot(rpart)
binary.model <- rpart
rpart.plot(binary.model)
binary.model <- rpart
rpart.plot(binary.model)
training.data <- data[2001:nrow(data), ]
test.data <- data[1:2000, ]
confusion.matrix <- function(prediction, truth) {
xtab <- (table(prediction, truth))
confusion <- matrix(rev(as.vector(xtab)), ncol = 2, byrow = TRUE)
colnames(confusion) <- c(paste("Pred", 1, sep = ":"), paste("Pred", 0, sep = ":"))
rownames(confusion) <- c(paste("Actual", 1, sep = ":"), paste("Actual", 0, sep = ":"))
confusion <- as.table(confusion)
}
confusion.data <- function(matrix) {
tp <- matrix[1, 1]
fn <- matrix[1, 2]
fp <- matrix[2, 1]
tn <- matrix[2, 2]
accuracy <- (tp + tn) / (tp + tn + fp + fn)
}
tree <- dec_o ~ attr_o + intel_o + sinc_o + fun_o + shar_o + gender
rpart <- rpart(tree, data = training.data, method = "class")
binary.model <- rpart
rpart.plot(binary.model)
prediction <- predict(rpart, test.data, type = "class")
truth <- test.data$dec_o
confusion <- confusion.matrix(prediction, truth)
confusion
plot(rpart)
text(rpart, cex = 0.8, use.n = TRUE, xpd = TRUE)
text(rpart, cex = 0.8)
plot(rpart)
text(rpart, cex = 0.8)
text(rpart, cex = 0.8, use.n = TRUE)
text(rpart, cex = 0.8, use.n = TRUE)
text(rpart, cex = 0.8, xpd = TRUE)
plot(rpart)
text(rpart, cex = 0.8, xpd = TRUE)
text(rpart, cex = 0.8)
plot(rpart.plot())
plot(rpart)
text(rpart, cex = 0.8)
prp(rpart, faclen = 0, cex = 0.8, extra = 1)
prp(rpart, faclen = 0, extra = 1)
plot(rpart)
text(rpart, cex = 0.8)
text(rpart, cex = 0.7)
text(rpart, cex = 0.7)
plot(rpart)
text(rpart, cex = 0.7)
text(rpart, cex = 0.75)
plot(rpart)
text(rpart, cex = 0.75)
install.packages("party")
library(partykit)
library(party)
install.packages("partykit")
library(partykit)
rparty <- as.party(rpart)
rparty
plot(rparty)
plot(rparty, type = "simple")
plot(rpart)
plot(rparty, type = "simple")
rparty
rpart
plot(rparty, type = "extended")
plot(rparty, type = "simple")
rparty <- as.simpleparty(rpart)
rparty <- as.simpleparty(rpart)
rparty <- as.party(rpart)
rparty
plot(rparty, type = "simple")
plot(rpart)
text(rpart, cex = 0.75)
text(rpart)
plot(rpart)
text(rpart)
rpart
rparty
rparty <- as.party(rpart(tree, data = training.data, method = "class"))
rparty
plot(rparty, type = "simple")
rparty <- as.party(rpart(tree, data = training.data))
rparty
plot(rparty, type = "simple")
rparty <- as.party(rpart(tree, data = training.data, method = "class"))
rparty
plot(rparty, type = "simple")
tree <- dec_o ~ attr_o + intel_o + sinc_o + fun_o + shar_o
rparty <- as.party(rpart(tree, data = training.data, method = "class"))
rparty
plot(rparty, type = "simple")
tree <- dec_o ~ attr_o + intel_o + sinc_o + fun_o + shar_o + gender
rpart
rparty <- as.party(rpart(tree, data = training.data, method = "class"))
rparty
plot(rparty, type = "simple")
plot(as.party(rpart))
install.packages("j48")
install.packages("RWeka")
library(RWekajars)
install.packages("RWeka")
library(RWeka)
install.packages("RWeka")
library(RWekajars)
library(RWekajars)
install.packages("rJava",type='source')
install.packages("rJava", type = "source")
install.packages("RWeka")
library(RWeka)
library(RWekajars)
sudo R CMD javareconf
install.packages("rJava",type='source')
install.packages("rJava", type = "source")
library(RWeka)
data <- read.csv("dataset.csv", header = TRUE, stringsAsFactors = FALSE)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(partykit)
library(RWeka)
data <- read.csv("dataset.csv", header = TRUE, stringsAsFactors = FALSE)
library(RWeka)
install.packages("rJava", type = "source")
library(RWeka)
library(rJava)
install.packages('rJava', type='source')
install.packages("RWeka")
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(partykit)
library(RWeka)
data <- read.csv("dataset.csv", header = TRUE, stringsAsFactors = FALSE)
training.data <- data[2001:nrow(data), ]
test.data <- data[1:2000, ]
confusion.matrix <- function(prediction, truth) {
xtab <- (table(prediction, truth))
confusion <- matrix(rev(as.vector(xtab)), ncol = 2, byrow = TRUE)
colnames(confusion) <- c(paste("Pred", 1, sep = ":"), paste("Pred", 0, sep = ":"))
rownames(confusion) <- c(paste("Actual", 1, sep = ":"), paste("Actual", 0, sep = ":"))
confusion <- as.table(confusion)
}
confusion.data <- function(matrix) {
tp <- matrix[1, 1]
fn <- matrix[1, 2]
fp <- matrix[2, 1]
tn <- matrix[2, 2]
accuracy <- (tp + tn) / (tp + tn + fp + fn)
}
j48 <- J48(dec_o ~ attr_o + intel_o + sinc_o + fun_o + shar_o + gender, data = training.data)
j48 <- J48(dec_o ~ attr_o + intel_o + sinc_o + fun_o + shar_o, data = training.data)
library(party)
ctree <- ctree(dec_o ~ attr_o + intel_o + sinc_o + fun_o + shar_o + gender, data = training.data)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(party)
library(partykit)
data <- read.csv("dataset.csv", header = TRUE, stringsAsFactors = FALSE)
training.data <- data[2001:nrow(data), ]
test.data <- data[1:2000, ]
confusion.matrix <- function(prediction, truth) {
xtab <- (table(prediction, truth))
confusion <- matrix(rev(as.vector(xtab)), ncol = 2, byrow = TRUE)
colnames(confusion) <- c(paste("Pred", 1, sep = ":"), paste("Pred", 0, sep = ":"))
rownames(confusion) <- c(paste("Actual", 1, sep = ":"), paste("Actual", 0, sep = ":"))
confusion <- as.table(confusion)
}
confusion.data <- function(matrix) {
tp <- matrix[1, 1]
fn <- matrix[1, 2]
fp <- matrix[2, 1]
tn <- matrix[2, 2]
accuracy <- (tp + tn) / (tp + tn + fp + fn)
}
ctree <- ctree(dec_o ~ attr_o + intel_o + sinc_o + fun_o + shar_o + gender, data = training.data)
ctree
ctree <- ctree(dec_o ~ attr_o + intel_o + sinc_o + fun_o + shar_o + gender, data = training.data, methods = "class"
)
ctree
plot(ctree)
plot(ctree, type = "simple")
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(partykit)
data <- read.csv("dataset.csv", header = TRUE, stringsAsFactors = FALSE)
training.data <- data[2001:nrow(data), ]
test.data <- data[1:2000, ]
confusion.matrix <- function(prediction, truth) {
xtab <- (table(prediction, truth))
confusion <- matrix(rev(as.vector(xtab)), ncol = 2, byrow = TRUE)
colnames(confusion) <- c(paste("Pred", 1, sep = ":"), paste("Pred", 0, sep = ":"))
rownames(confusion) <- c(paste("Actual", 1, sep = ":"), paste("Actual", 0, sep = ":"))
confusion <- as.table(confusion)
}
confusion.data <- function(matrix) {
tp <- matrix[1, 1]
fn <- matrix[1, 2]
fp <- matrix[2, 1]
tn <- matrix[2, 2]
accuracy <- (tp + tn) / (tp + tn + fp + fn)
}
tree <- dec_o ~ attr_o + intel_o + sinc_o + fun_o + shar_o + gender
rpart <- rpart(tree, data = training.data, method = "class")
prediction <- predict(rpart, test.data, type = "class")
truth <- test.data$dec_o
rpart
rparty <- as.party(rpart)
rparty
plot(rparty, type = "simple")
confusion <- confusion.matrix(prediction, truth)
confusion
pmml(rpart)
install.packages("pmml")
library(pmml)
pmml(rpart)
pm <- pmmlTreeModel(pmml(rpart))
pmml(rpart)
p <- pmml(rpart)
pm <- pmmlTreeModel(p)
p <- pmml(rparty)
p <- pmml(rpart)
pm <- pmmlTreeModel(p)
saveXML(pmml(rpart), "pmml.xml")
pm <- pmmlTreeModel("pmml.xml")
pmml(rpart)
pm <- pmmlTreeModel("pmml.xml")
pmmlTreeModel("pmml.xml")
saveXML(pmml(rpart), "pmml.xml")
pmmlTreeModel("pmml.xml")
rpart
rparty <- as.party(rpart)
rparty
tree <- match ~ attr_o + intel_o + sinc_o + fun_o + shar_o + gender
rpart <- rpart(tree, data = training.data, method = "class")
prediction <- predict(rpart, test.data, type = "class")
truth <- test.data$dec_o
rpart
rpart
rparty <- as.party(rpart)
rparty
plot(rparty, type = "simple")
tree <- dec_o ~ attr_o + intel_o + sinc_o + fun_o + shar_o + gender
rpart <- rpart(tree, data = training.data, method = "class")
prediction <- predict(rpart, test.data, type = "class")
truth <- test.data$dec_o
rpart
rparty <- as.party(rpart)
rparty
plot(rparty, type = "simple")
tree <- dec_o ~ attr_o + intel_o + sinc_o + gender
rpart <- rpart(tree, data = training.data, method = "class")
prediction <- predict(rpart, test.data, type = "class")
truth <- test.data$dec_o
rpart
rparty <- as.party(rpart)
rparty
plot(rparty, type = "simple")
tree <- dec_o ~ attr_o + intel_o + sinc_o + fun_o + shar_o + gender
rpart <- rpart(tree, data = training.data, method = "class")
prediction <- predict(rpart, test.data, type = "class")
truth <- test.data$dec_o
rparty <- as.party(rpart)
rparty
plot(rparty, type = "simple")
print(rparty)
nodeprune(rparty, 2)
length(rparty)
rparty(5)
rparty[5]
rparty2 <- rparty
names(rparty2)
nodeids(rparty)
nodeids(rparty, terminal = TRUE)
nodeapply(rparty, ids = c(1, 5), FUN = function(n) n$info)
nodeapply(rparty, ids = c(2, 3), FUN = function(n) n$info)
nodeapply(rparty, ids = c(1, 5), FUN = function(n) n$dec_o)
nodeapply(rparty, ids = c(1, 5), FUN = function(n) n$info)
nodeapply(rparty, ids = nodeids(rparty), FUN = function(n) n$info)
nodeapply(rparty, ids = nodeids(rparty, terminal = TRUE), FUN = function(n) n$info)
raprty
rparty
rparty[5]
rparty[5]$`5`
rparty[5]$
info
rparty[5]$info
rparty[5]
rparty[5]$root
rparty[5]$info
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(partykit)
data <- read.csv("dataset.csv", header = TRUE, stringsAsFactors = FALSE)
training.data <- data[2001:nrow(data), ]
test.data <- data[1:2000, ]
confusion.matrix <- function(prediction, truth) {
xtab <- (table(prediction, truth))
confusion <- matrix(rev(as.vector(xtab)), ncol = 2, byrow = TRUE)
colnames(confusion) <- c(paste("Pred", 1, sep = ":"), paste("Pred", 0, sep = ":"))
rownames(confusion) <- c(paste("Actual", 1, sep = ":"), paste("Actual", 0, sep = ":"))
confusion <- as.table(confusion)
}
confusion.data <- function(matrix) {
tp <- matrix[1, 1]
fn <- matrix[1, 2]
fp <- matrix[2, 1]
tn <- matrix[2, 2]
accuracy <- (tp + tn) / (tp + tn + fp + fn)
}
tree <- dec_o ~ attr_o + intel_o + sinc_o + fun_o + shar_o + gender
rpart <- rpart(tree, data = training.data, method = "class")
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(partykit)
data <- read.csv("dataset.csv", header = TRUE, stringsAsFactors = FALSE)
training.data <- data[2001:nrow(data), ]
test.data <- data[1:2000, ]
confusion.matrix <- function(prediction, truth) {
xtab <- (table(prediction, truth))
confusion <- matrix(rev(as.vector(xtab)), ncol = 2, byrow = TRUE)
colnames(confusion) <- c(paste("Pred", 1, sep = ":"), paste("Pred", 0, sep = ":"))
rownames(confusion) <- c(paste("Actual", 1, sep = ":"), paste("Actual", 0, sep = ":"))
confusion <- as.table(confusion)
}
confusion.data <- function(matrix) {
tp <- matrix[1, 1]
fn <- matrix[1, 2]
fp <- matrix[2, 1]
tn <- matrix[2, 2]
accuracy <- (tp + tn) / (tp + tn + fp + fn)
}
tree <- dec_o ~ attr_o + intel_o + sinc_o + fun_o + shar_o + gender
rpart <- rpart(tree, data = training.data, method = "class")
prediction <- predict(rpart, test.data, type = "class")
truth <- test.data$dec_o
rparty <- as.party(rpart)
rparty
plot(rparty, type = "simple")
confusion <- confusion.matrix(prediction, truth)
confusion
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(partykit)
data <- read.csv("dataset.csv", header = TRUE, stringsAsFactors = FALSE)
training.data <- data[2001:nrow(data), ]
test.data <- data[1:2000, ]
confusion.matrix <- function(prediction, truth) {
xtab <- (table(prediction, truth))
confusion <- matrix(rev(as.vector(xtab)), ncol = 2, byrow = TRUE)
colnames(confusion) <- c(paste("Pred", 1, sep = ":"), paste("Pred", 0, sep = ":"))
rownames(confusion) <- c(paste("Actual", 1, sep = ":"), paste("Actual", 0, sep = ":"))
confusion <- as.table(confusion)
}
confusion.data <- function(matrix) {
tp <- matrix[1, 1]
fn <- matrix[1, 2]
fp <- matrix[2, 1]
tn <- matrix[2, 2]
accuracy <- (tp + tn) / (tp + tn + fp + fn)
}
tree <- dec_o ~ attr_o + intel_o + sinc_o + fun_o + shar_o + gender
rpart <- rpart(tree, data = training.data, method = "class")
prediction <- predict(rpart, test.data, type = "class")
truth <- test.data$dec_o
rparty <- as.party(rpart)
rparty
plot(rparty, type = "simple")
confusion <- confusion.matrix(prediction, truth)
confusion
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(partykit)
data <- read.csv("dataset.csv", header = TRUE, stringsAsFactors = FALSE)
training.data <- data[2001:nrow(data), ]
test.data <- data[1:2000, ]
confusion.matrix <- function(prediction, truth) {
xtab <- (table(prediction, truth))
confusion <- matrix(rev(as.vector(xtab)), ncol = 2, byrow = TRUE)
colnames(confusion) <- c(paste("Pred", 1, sep = ":"), paste("Pred", 0, sep = ":"))
rownames(confusion) <- c(paste("Actual", 1, sep = ":"), paste("Actual", 0, sep = ":"))
confusion <- as.table(confusion)
}
confusion.data <- function(matrix) {
tp <- matrix[1, 1]
fn <- matrix[1, 2]
fp <- matrix[2, 1]
tn <- matrix[2, 2]
accuracy <- (tp + tn) / (tp + tn + fp + fn)
}
tree <- dec_o ~ attr_o + intel_o + sinc_o + fun_o + shar_o + gender
rpart <- rpart(tree, data = training.data, method = "class")
prediction <- predict(rpart, test.data, type = "class")
truth <- test.data$dec_o
rparty <- as.party(rpart)
rparty
plot(rparty, type = "simple")
confusion <- confusion.matrix(prediction, truth)
confusion
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(partykit)
data <- read.csv("dataset.csv", header = TRUE, stringsAsFactors = FALSE)
training.data <- data[2001:nrow(data), ]
test.data <- data[1:2000, ]
confusion.matrix <- function(prediction, truth) {
xtab <- (table(prediction, truth))
confusion <- matrix(rev(as.vector(xtab)), ncol = 2, byrow = TRUE)
colnames(confusion) <- c(paste("Pred", "yes", sep = ":"), paste("Pred", "no", sep = ":"))
rownames(confusion) <- c(paste("Actual", "yes", sep = ":"), paste("Actual", "no", sep = ":"))
confusion <- as.table(confusion)
}
confusion.data <- function(matrix) {
tp <- matrix[1, 1]
fn <- matrix[1, 2]
fp <- matrix[2, 1]
tn <- matrix[2, 2]
accuracy <- (tp + tn) / (tp + tn + fp + fn)
}
tree <- dec_o ~ attr_o + intel_o + sinc_o + fun_o + shar_o + gender
rpart <- rpart(tree, data = training.data, method = "class")
prediction <- predict(rpart, test.data, type = "class")
truth <- test.data$dec_o
rparty <- as.party(rpart)
rparty
plot(rparty, type = "simple")
confusion <- confusion.matrix(prediction, truth)
confusion
plot(rparty)
plot(rparty, type = "simple")
rparty[5]
rparty[5]$info
rparty[5]$`5`
rparty[5]$info
typeof(data)
dim(data)
